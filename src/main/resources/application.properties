spring.application.name=spring-cloud-config-server
server.port=8888

# Configure local git repository as a cofig store, we can configure S3 bucket and other config stores as well.
#spring.cloud.config.server.git.uri=file:///home/amipatil/Data/repository/microservices/currency-app/currency-app-config
# This is how we can configure remote git repository
# As we used placeholder below to define directory per service. Placeholders can be used in below git url as well.
# For example, we can have separate git repository per application using.  
# spring.cloud.config.server.git.uri=https://github.com/iamitpatil1993/{application}
# Application name in request will be used to connect appropriate git repository.
spring.cloud.config.server.git.uri=https://github.com/iamitpatil1993/currency-app-config
spring.cloud.config.server.git.skip-ssl-validation=true


#By default config server clones the repository on first request, so first request will suffer. Hence
#we can load/clone the repository on startup to solve the problem. It will also helpful to cache any
#configuration/connection issues to git repository at startup time instead of runtime in later time.
#By default this is false.
spring.cloud.config.server.git.clone-on-start=true


# Setting HTTP connection timeout
spring.cloud.config.server.git.timeout=10


# If git repository is private and we want HTTP use of git over SSH, then we need to configure git credentials.
# typically these should be injected into container (docker), instead of hard cofing here.
#spring.cloud.config.server.git.username=iamitpatil1993@gmail.com
#spring.cloud.config.server.git.password=strongpassword

#Force pull in Git Repositories, check reason https://cloud.spring.io/spring-cloud-config/reference/html/#_force_pull_in_git_repositories
spring.cloud.config.server.git.force-pull=true

# Defaults to false.
# Keeps local repository branches clean and up to remote with remote. So, no need to restart server to reflect git changes.
# Manages branch deletion, creation, update without server restart
spring.cloud.config.server.git.delete-untracked-branches=true


# By default the value is 0, meaning the config server will fetch updated configuration from the Git repo every time it is requested.
# We can cache the config for few seconds to avoid unnecessary calls to git to improve latency 
spring.cloud.config.server.git.refresh-rate=1

# We can group service configurations files into directories and use application name as a directory name.
# Using below configuration, application name will be used to search directory in git starting from root.
# By default (without this propery) spring only looks for configuration file at root of git.
# This can be any static path or placeholder (as below). This helps to group application configuration properties into directories
# in git.
spring.cloud.config.server.git.search-paths={application}



# This enables vault as a another backed storage
spring.profiles.active=git,vault

# Define git store with lower priority than vault (lower the number higher the precedence)
spring.cloud.config.server.git.order=2

# Defaults to : localhost
spring.cloud.config.server.vault.host=localhost

# Defaults to : 8200
spring.cloud.config.server.vault.port=8200

# Detaults to : HTTPS (and recommended)
# changing to HTTP for simplicity
spring.cloud.config.server.vault.scheme=http

# Defaults to : secret
# chaning this to kv, as my kv secret engine is mounted at kv
spring.cloud.config.server.vault.backend=kv

# Define vault to have higher precedence than git
spring.cloud.config.server.vault.order=1

# Using 'overrides' feature, we can add properties applicable to all applications.
# And these properties overriden here will have highes precedence over any other spring config/boot hook.
# So, even if config vaules for below two properties exists in git backend, these overriden vaules will take 
# higher precedence over git and will be used by config client.
# This feature is usefull in, providing properties for all apps, which will take highes precedence irrespective
# of other property sources. 
# This config map will be added as a another property source in response above all other property sources
# and will have highest precedence

#spring.cloud.config.server.overrides.limits.minimum=123123
#spring.cloud.config.server.overrides.limits.maximum=312313





